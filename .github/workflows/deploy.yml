name: Deploy to Cloudflare

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '20' # 修复 1: 升级 Node.js 版本以兼容 Wrangler
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare Workers and Pages
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      # --- 资源创建 ---
      - name: Create D1 database
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 create sm-auth-survey-db
        continue-on-error: true

      - name: Create KV namespace
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          command: kv:namespace create "CACHE"
        continue-on-error: true

      - name: Create R2 bucket
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          command: r2 bucket create sm-auth-survey-files
        continue-on-error: true

      # --- 动态更新 wrangler.toml ---
      - name: Update wrangler.toml with actual resource IDs
        id: update_toml
        run: |
          cd backend
          
          # 获取 D1 数据库 ID
          D1_ID=$(npx wrangler d1 list --json | jq -r '.[] | select(.name=="sm-auth-survey-db") | .uuid')
          echo "D1 Database ID: $D1_ID"
          
          # 修复 2: 使用 jq 从 JSON 输出中获取 KV ID
          # 注意：Wrangler 可能会自动为 KV 命名空间添加项目前缀，例如 "my-project-CACHE"
          # 我们使用 contains 来进行更灵活的匹配
          KV_ID=$(npx wrangler kv:namespace list --json | jq -r '.[] | select(.title | contains("CACHE")) | .id')
          echo "KV Namespace ID: $KV_ID"
          
          if [ -z "$D1_ID" ] || [ -z "$KV_ID" ]; then
            echo "Error: Failed to retrieve D1 or KV resource IDs."
            exit 1
          fi
          
          # 使用 sed 替换 wrangler.toml 中的占位符
          sed -i "s/database_id = \".*\"/database_id = \"$D1_ID\"/" wrangler.toml
          sed -i "s/id = \".*\"/id = \"$KV_ID\"/" wrangler.toml
          sed -i "s/preview_id = \".*\"/preview_id = \"$KV_ID\"/" wrangler.toml
          
          echo "wrangler.toml updated successfully."
          cat wrangler.toml # 打印更新后的文件内容以供调试

      # --- 数据库迁移 ---
      - name: Run database migrations
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          # 修复 3: 添加 --remote 标志以在远程数据库上执行
          command: d1 execute sm-auth-survey-db --remote --file=./migrations/0001_initial_schema.sql
          workingDirectory: backend
        # 第一次运行后，如果表已存在，迁移可能会失败，所以允许错误
        continue-on-error: true

      - name: Run initial data migration
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 execute sm-auth-survey-db --remote --file=./migrations/0002_initial_data.sql
          workingDirectory: backend
        continue-on-error: true

      - name: Run email templates and site configs migration
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 execute sm-auth-survey-db --remote --file=./migrations/0003_email_templates_and_site_configs.sql
          workingDirectory: backend
        continue-on-error: true

      # --- 部署后端 ---
      - name: Deploy backend to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          workingDirectory: backend
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          FROM_NAME: ${{ secrets.FROM_NAME }}
          ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
          ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
          TENCENT_SECRET_ID: ${{ secrets.TENCENT_SECRET_ID }}
          TENCENT_SECRET_KEY: ${{ secrets.TENCENT_SECRET_KEY }}
          ADMIN_NAME: ${{ secrets.ADMIN_NAME }}
          ADMIN_ID_CARD: ${{ secrets.ADMIN_ID_CARD }}
          WECHAT_WEBHOOK_URL: ${{ secrets.WECHAT_WEBHOOK_URL }}

      # --- 部署前端 ---
      # 优化 4: 将路由配置文件放在 public 目录中，避免二次部署
      - name: Create Pages API routing configuration
        run: |
          mkdir -p frontend/public
          cat > frontend/public/_routes.json << 'EOF'
          {
            "version": 1,
            "include": ["/api/*"],
            "exclude": ["/api/assets/*"]
          }
          EOF

      - name: Build frontend
        run: |
          cd frontend
          pnpm run build
        env:
          # VITE_API_BASE_URL 应该指向您的 Worker 部署后的 URL
          # 如果您配置了自定义域，请使用它。否则，使用 *.workers.dev URL。
          # 在这里我们假设 Worker 的名称与 wrangler.toml 中定义的一致 (sm-auth-survey-api)
          VITE_API_BASE_URL: https://sm-auth-survey-api.${{ secrets.WORKERS_DEV_URL }} # 请确保在 secrets 中设置了 WORKERS_DEV_URL

      - name: Deploy frontend to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          projectName: sm-auth-survey-frontend
          directory: frontend/dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      # --- 输出部署信息 ---
      - name: Output deployment info
        run: |
          echo "🚀 Deployment completed!"
          echo "📱 Frontend URL: https://sm-auth-survey-frontend.pages.dev"
          echo "🔧 Backend URL: https://sm-auth-survey-api.${{ secrets.WORKERS_DEV_URL }}"
