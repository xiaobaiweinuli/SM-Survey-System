name: Deploy to Cloudflare (Advanced Integrated & Automated)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  deployments: write

jobs:
  deploy-integrated-app:
    runs-on: ubuntu-latest
    name: Build and Deploy Integrated App
    steps:
      # ==================================================================
      # 步骤 1: 检出代码和安装全局工具
      # ==================================================================
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Wrangler
        run: npm install -g wrangler

      # ==================================================================
      # 步骤 2: 自动化创建 Cloudflare 资源
      # ==================================================================
      - name: Create Cloudflare Resources
        run: |
          # D1 数据库
          DB_NAME="sm-auth-survey-db"
          echo "Checking for D1 Database: $DB_NAME"
          if ! wrangler d1 list | grep -q "$DB_NAME"; then
            echo "D1 Database not found. Creating and migrating..."
            wrangler d1 create "$DB_NAME"
            wrangler d1 execute "$DB_NAME" --file=./database/schema.sql
          else
            echo "D1 Database already exists."
          fi
          
          # R2 存储桶
          BUCKET_NAME="sm-auth-survey-files"
          echo "Checking for R2 Bucket: $BUCKET_NAME"
          if ! wrangler r2 bucket list | grep -q "$BUCKET_NAME"; then
            echo "R2 Bucket not found. Creating..."
            wrangler r2 bucket create "$BUCKET_NAME"
          else
            echo "R2 Bucket already exists."
          fi

          # KV 命名空间
          KV_NAMESPACE="sm-auth-survey-cache"
          echo "Checking for KV Namespace: $KV_NAMESPACE"
          if ! wrangler kv namespace list | grep -q "$KV_NAMESPACE"; then
            echo "KV Namespace not found. Creating..."
            wrangler kv namespace create "$KV_NAMESPACE"
          else
            echo "KV Namespace already exists."
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      # ==================================================================
      # 步骤 3: 设置构建环境并构建前端
      # ==================================================================
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          # 关键：确保这里的版本号与你本地 pnpm 的主版本号一致
          version: 9 # 假设你本地用的是 v9.x

      - name: Setup Node.js and Cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install Frontend Dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./frontend

      - name: Build Frontend
        run: pnpm run build
        working-directory: ./frontend
        env:
          VITE_API_BASE_URL: /

      # ==================================================================
      # 步骤 4: 组装最终的部署目录
      # ==================================================================
      - name: Assemble Final Deployment Directory
        run: |
          mkdir publish
          cp -r frontend/dist/* publish/
          mkdir -p publish/functions
          cp -r backend/src/* publish/functions/
          mv publish/functions/index.js publish/functions/[[path]].js
          echo '{"version": 1, "include": ["/api/*"], "exclude": []}' > publish/functions/_routes.json
          echo "--- Assembled Directory Structure ---"
          ls -R publish

      # ==================================================================
      # 步骤 5: 部署组装好的目录到 Cloudflare Pages
      # ==================================================================
      - name: Deploy Assembled App to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: sm-survey-system
          directory: ./publish
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        env:
          # 将所有密钥和绑定传递给 Pages Functions
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          FROM_NAME: ${{ secrets.FROM_NAME }}
          ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
          ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
          TENCENT_SECRET_ID: ${{ secrets.TENCENT_SECRET_ID }}
          TENCENT_SECRET_KEY: ${{ secrets.TENCENT_SECRET_KEY }}
          ADMIN_NAME: ${{ secrets.ADMIN_NAME }}
          ADMIN_ID_CARD: ${{ secrets.ADMIN_ID_CARD }}
          WECHAT_WEBHOOK_URL: ${{ secrets.WECHAT_WEBHOOK_URL }}
          DB: d1_binding:sm-auth-survey-db
          BUCKET: r2_binding:sm-auth-survey-files
          CACHE: kv_binding:sm-auth-survey-cache
