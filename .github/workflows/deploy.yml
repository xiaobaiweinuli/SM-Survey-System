name: Deploy to Cloudflare

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy Cloudflare Backend and Frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      # 升级 Wrangler 到 4.x
      - name: Upgrade Wrangler
        run: npm install --save-dev wrangler@4

      # 创建 D1 数据库（如果不存在）
      - name: Create D1 database
        run: |
          cd backend
          EXIST=$(npx wrangler d1 list --json | jq -r '.[] | select(.name=="sm-auth-survey-db") | .uuid')
          if [ -z "$EXIST" ]; then
            npx wrangler d1 create sm-auth-survey-db
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      # 创建 KV namespace（如果不存在）
      - name: Create KV namespace
        run: |
          cd backend
          EXIST=$(npx wrangler kv:namespace list --json | jq -r '.[] | select(.title=="CACHE") | .id')
          if [ -z "$EXIST" ]; then
            npx wrangler kv:namespace create "CACHE"
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      # 创建 R2 bucket（如果不存在）
      - name: Create R2 bucket
        run: |
          cd backend
          EXIST=$(npx wrangler r2 bucket list --json | jq -r '.[] | select(.name=="sm-auth-survey-files") | .name')
          if [ -z "$EXIST" ]; then
            npx wrangler r2 bucket create sm-auth-survey-files
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      # 获取实际 D1 和 KV ID 并更新 wrangler.toml
      - name: Update wrangler.toml with actual IDs
        run: |
          cd backend
          # 获取 D1 数据库 ID
          D1_ID=$(npx wrangler d1 list --json | jq -r '.[] | select(.name=="sm-auth-survey-db") | .uuid')
          sed -i "s/database_id = \"your-database-id-will-be-auto-generated\"/database_id = \"$D1_ID\"/" wrangler.toml

          # 获取 KV namespace ID
          KV_ID=$(npx wrangler kv:namespace list --json | jq -r '.[] | select(.title=="CACHE") | .id')
          sed -i "s/id = \"your-kv-namespace-id\"/id = \"$KV_ID\"/" wrangler.toml
          sed -i "s/preview_id = \"your-preview-kv-namespace-id\"/preview_id = \"$KV_ID\"/" wrangler.toml

      # 运行数据库迁移
      - name: Run D1 migrations
        run: |
          cd backend
          npx wrangler d1 execute sm-auth-survey-db --file=./migrations/0001_initial_schema.sql
          npx wrangler d1 execute sm-auth-survey-db --file=./migrations/0002_initial_data.sql
          npx wrangler d1 execute sm-auth-survey-db --file=./migrations/0003_email_templates_and_site_configs.sql
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      # 部署后端 Worker
      - name: Deploy backend to Cloudflare Workers
        run: |
          cd backend
          npx wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          FROM_NAME: ${{ secrets.FROM_NAME }}
          ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
          ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
          TENCENT_SECRET_ID: ${{ secrets.TENCENT_SECRET_ID }}
          TENCENT_SECRET_KEY: ${{ secrets.TENCENT_SECRET_KEY }}
          ADMIN_NAME: ${{ secrets.ADMIN_NAME }}
          ADMIN_ID_CARD: ${{ secrets.ADMIN_ID_CARD }}
          WECHAT_WEBHOOK_URL: ${{ secrets.WECHAT_WEBHOOK_URL }}

      # 构建前端
      - name: Build frontend
        run: |
          cd frontend
          pnpm run build
        env:
          VITE_API_BASE_URL: /api

      # 部署前端到 Cloudflare Pages
      - name: Deploy frontend to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: sm-auth-survey-frontend
          directory: frontend/dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Output deployment info
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "📱 Frontend URL: https://sm-auth-survey-frontend.pages.dev"
          echo "🔧 Backend API: https://sm-auth-survey-api.${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.workers.dev"
          echo "💾 Database: sm-auth-survey-db"
          echo "📁 Storage: sm-auth-survey-files"
