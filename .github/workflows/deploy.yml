name: Deploy to Cloudflare

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy Cloudflare Backend and Frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Upgrade Wrangler to 4.x
        run: npm install --save-dev wrangler@4

      # Á°Æ‰øù D1 Êï∞ÊçÆÂ∫ìÂ≠òÂú®
      - name: Ensure D1 database exists
        run: |
          cd backend
          EXIST=$(npx wrangler d1 list --format=json | jq -r '.[] | select(.name=="sm-auth-survey-db") | .uuid')
          if [ -z "$EXIST" ]; then
            npx wrangler d1 create sm-auth-survey-db
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      # Á°Æ‰øù KV namespace Â≠òÂú®
      - name: Ensure KV namespace exists
        run: |
          cd backend
          EXIST=$(npx wrangler kv:namespace list --format=json | jq -r '.[] | select(.title=="CACHE") | .id')
          if [ -z "$EXIST" ]; then
            npx wrangler kv:namespace create "CACHE"
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      # Á°Æ‰øù R2 bucket Â≠òÂú®
      - name: Ensure R2 bucket exists
        run: |
          cd backend
          EXIST=$(npx wrangler r2 bucket list --format=json | jq -r '.[] | select(.name=="sm-auth-survey-files") | .name')
          if [ -z "$EXIST" ]; then
            npx wrangler r2 bucket create sm-auth-survey-files
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      # Ëé∑Âèñ D1 Âíå KV ÂÆûÈôÖ ID Âπ∂ÊõøÊç¢Âç†‰ΩçÁ¨¶
      - name: Update wrangler.toml with actual IDs
        run: |
          cd backend
          D1_ID=$(npx wrangler d1 list --format=json | jq -r '.[] | select(.name=="sm-auth-survey-db") | .uuid')
          KV_ID=$(npx wrangler kv:namespace list --format=json | jq -r '.[] | select(.title=="CACHE") | .id')

          sed -i "s/PLACEHOLDER_D1_ID/$D1_ID/" wrangler.toml
          sed -i "s/PLACEHOLDER_KV_ID/$KV_ID/" wrangler.toml
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      # ÊâßË°å D1 Êï∞ÊçÆÂ∫ìËøÅÁßª
      - name: Run D1 migrations
        run: |
          cd backend
          npx wrangler d1 execute sm-auth-survey-db --file=./migrations/0001_initial_schema.sql
          npx wrangler d1 execute sm-auth-survey-db --file=./migrations/0002_initial_data.sql
          npx wrangler d1 execute sm-auth-survey-db --file=./migrations/0003_email_templates_and_site_configs.sql
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      # ÈÉ®ÁΩ≤ÂêéÁ´Ø Worker
      - name: Deploy backend Worker
        run: |
          cd backend
          npx wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          FROM_NAME: ${{ secrets.FROM_NAME }}
          ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
          ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
          TENCENT_SECRET_ID: ${{ secrets.TENCENT_SECRET_ID }}
          TENCENT_SECRET_KEY: ${{ secrets.TENCENT_SECRET_KEY }}
          ADMIN_NAME: ${{ secrets.ADMIN_NAME }}
          ADMIN_ID_CARD: ${{ secrets.ADMIN_ID_CARD }}
          WECHAT_WEBHOOK_URL: ${{ secrets.WECHAT_WEBHOOK_URL }}

      # ÊûÑÂª∫ÂâçÁ´Ø
      - name: Build frontend
        run: |
          cd frontend
          pnpm run build
        env:
          VITE_API_BASE_URL: /api

      # ÈÉ®ÁΩ≤ÂâçÁ´ØÂà∞ Pages
      - name: Deploy frontend to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: sm-auth-survey-frontend
          directory: frontend/dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Output deployment info
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "üì± Frontend URL: https://sm-auth-survey-frontend.pages.dev"
          echo "üîß Backend API: https://sm-auth-survey-api.${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.workers.dev"
          echo "üíæ Database: sm-auth-survey-db"
          echo "üìÅ Storage: sm-auth-survey-files"
